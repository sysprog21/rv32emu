
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Fri Jan  5 18:43:51 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/fourcolor/Documents/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/fourcolor/Documents/riscv-ctg/sample_cgfs/rv32fc_1.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.fsw instruction of the RISC-V RV32FC extension for the cfsw covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*F.*C.*);def TEST_CASE_1=True;",cfsw)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x2,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2, rs1==x15, rs2==f11,imm_val == 0, rs2_val == -2
// opcode:c.fsw; op1:x15; op2:f11; immval:0x0; align:0; flagreg:x3;
// valreg: x2; valoffset: 0*FLEN/8
TEST_STORE_F(x1,x17,20,x15,f11,0x0,0*XLEN/8,c.fsw,0,x3,x2, 0*FLEN/8)

inst_1:
// rs1==x9, rs2==f13,imm_val == 0 and fcsr == 0, rs2_val == 2097152
// opcode:c.fsw; op1:x9; op2:f13; immval:0x0; align:0; flagreg:x3;
// valreg: x2; valoffset: 1*FLEN/8
TEST_STORE_F(x1,x17,0,x9,f13,0x0,1*XLEN/8,c.fsw,0,x3,x2, 1*FLEN/8)

inst_2:
// rs1==x11, rs2==f12,imm_val > 0, imm_val == 64, rs2_val == 16
// opcode:c.fsw; op1:x11; op2:f12; immval:0x40; align:0; flagreg:x3;
// valreg: x2; valoffset: 2*FLEN/8
TEST_STORE_F(x1,x17,85,x11,f12,0x40,2*XLEN/8,c.fsw,0,x3,x2, 2*FLEN/8)

inst_3:
// rs1==x10, rs2==f8,imm_val > 0 and fcsr == 0, imm_val == 108, rs2_val == 33554432
// opcode:c.fsw; op1:x10; op2:f8; immval:0x6c; align:0; flagreg:x3;
// valreg: x2; valoffset: 3*FLEN/8
TEST_STORE_F(x1,x17,0,x10,f8,0x6c,3*XLEN/8,c.fsw,0,x3,x2, 3*FLEN/8)

inst_4:
// rs1==x12, rs2==f15,rs2_val == (-2**(xlen-1)), imm_val == 92, rs2_val == -2147483648
// opcode:c.fsw; op1:x12; op2:f15; immval:0x5c; align:0; flagreg:x3;
// valreg: x2; valoffset: 4*FLEN/8
TEST_STORE_F(x1,x17,154,x12,f15,0x5c,4*XLEN/8,c.fsw,0,x3,x2, 4*FLEN/8)

inst_5:
// rs1==x8, rs2==f9,rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647, imm_val == 32
// opcode:c.fsw; op1:x8; op2:f9; immval:0x20; align:0; flagreg:x3;
// valreg: x2; valoffset: 5*FLEN/8
TEST_STORE_F(x1,x17,111,x8,f9,0x20,5*XLEN/8,c.fsw,0,x3,x2, 5*FLEN/8)

inst_6:
// rs1==x14, rs2==f10,rs2_val == -3, 
// opcode:c.fsw; op1:x14; op2:f10; immval:0x44; align:0; flagreg:x3;
// valreg: x2; valoffset: 6*FLEN/8
TEST_STORE_F(x1,x17,4,x14,f10,0x44,6*XLEN/8,c.fsw,0,x3,x2, 6*FLEN/8)

inst_7:
// rs1==x13, rs2==f14,rs2_val == -5, imm_val == 16
// opcode:c.fsw; op1:x13; op2:f14; immval:0x10; align:0; flagreg:x3;
// valreg: x2; valoffset: 7*FLEN/8
TEST_STORE_F(x1,x17,58,x13,f14,0x10,7*XLEN/8,c.fsw,0,x3,x2, 7*FLEN/8)

inst_8:
// rs2_val == -9, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x38; align:0; flagreg:x3;
// valreg: x2; valoffset: 8*FLEN/8
TEST_STORE_F(x1,x17,32,x15,f15,0x38,8*XLEN/8,c.fsw,0,x3,x2, 8*FLEN/8)

inst_9:
// rs2_val == -17, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x14; align:0; flagreg:x3;
// valreg: x2; valoffset: 9*FLEN/8
TEST_STORE_F(x1,x17,77,x15,f15,0x14,9*XLEN/8,c.fsw,0,x3,x2, 9*FLEN/8)

inst_10:
// rs2_val == -33, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x14; align:0; flagreg:x3;
// valreg: x2; valoffset: 10*FLEN/8
TEST_STORE_F(x1,x17,88,x15,f15,0x14,10*XLEN/8,c.fsw,0,x3,x2, 10*FLEN/8)

inst_11:
// rs2_val == -65, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0xc; align:0; flagreg:x3;
// valreg: x2; valoffset: 11*FLEN/8
TEST_STORE_F(x1,x17,140,x15,f15,0xc,11*XLEN/8,c.fsw,0,x3,x2, 11*FLEN/8)

inst_12:
// rs2_val == -129, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0xc; align:0; flagreg:x3;
// valreg: x2; valoffset: 12*FLEN/8
TEST_STORE_F(x1,x17,116,x15,f15,0xc,12*XLEN/8,c.fsw,0,x3,x2, 12*FLEN/8)

inst_13:
// rs2_val == -257, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x40; align:0; flagreg:x3;
// valreg: x2; valoffset: 13*FLEN/8
TEST_STORE_F(x1,x17,119,x15,f15,0x40,13*XLEN/8,c.fsw,0,x3,x2, 13*FLEN/8)

inst_14:
// rs2_val == -513, imm_val == 116
// opcode:c.fsw; op1:x15; op2:f15; immval:0x74; align:0; flagreg:x3;
// valreg: x2; valoffset: 14*FLEN/8
TEST_STORE_F(x1,x17,109,x15,f15,0x74,14*XLEN/8,c.fsw,0,x3,x2, 14*FLEN/8)

inst_15:
// rs2_val == -1025, imm_val == 40
// opcode:c.fsw; op1:x15; op2:f15; immval:0x28; align:0; flagreg:x3;
// valreg: x2; valoffset: 15*FLEN/8
TEST_STORE_F(x1,x17,50,x15,f15,0x28,15*XLEN/8,c.fsw,0,x3,x2, 15*FLEN/8)

inst_16:
// rs2_val == -2049, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x2c; align:0; flagreg:x3;
// valreg: x2; valoffset: 16*FLEN/8
TEST_STORE_F(x1,x17,118,x15,f15,0x2c,16*XLEN/8,c.fsw,0,x3,x2, 16*FLEN/8)

inst_17:
// rs2_val == -4097, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x4c; align:0; flagreg:x3;
// valreg: x2; valoffset: 17*FLEN/8
TEST_STORE_F(x1,x17,113,x15,f15,0x4c,17*XLEN/8,c.fsw,0,x3,x2, 17*FLEN/8)

inst_18:
// rs2_val == -8193, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x1c; align:0; flagreg:x3;
// valreg: x2; valoffset: 18*FLEN/8
TEST_STORE_F(x1,x17,66,x15,f15,0x1c,18*XLEN/8,c.fsw,0,x3,x2, 18*FLEN/8)

inst_19:
// rs2_val == -16385, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x24; align:0; flagreg:x3;
// valreg: x2; valoffset: 19*FLEN/8
TEST_STORE_F(x1,x17,120,x15,f15,0x24,19*XLEN/8,c.fsw,0,x3,x2, 19*FLEN/8)

inst_20:
// rs2_val == -32769, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x0; align:0; flagreg:x3;
// valreg: x2; valoffset: 20*FLEN/8
TEST_STORE_F(x1,x17,102,x15,f15,0x0,20*XLEN/8,c.fsw,0,x3,x2, 20*FLEN/8)

inst_21:
// rs2_val == -65537, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x40; align:0; flagreg:x3;
// valreg: x2; valoffset: 21*FLEN/8
TEST_STORE_F(x1,x17,124,x15,f15,0x40,21*XLEN/8,c.fsw,0,x3,x2, 21*FLEN/8)

inst_22:
// rs2_val == -131073, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x20; align:0; flagreg:x3;
// valreg: x2; valoffset: 22*FLEN/8
TEST_STORE_F(x1,x17,6,x15,f15,0x20,22*XLEN/8,c.fsw,0,x3,x2, 22*FLEN/8)

inst_23:
// rs2_val == -262145, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x1c; align:0; flagreg:x3;
// valreg: x2; valoffset: 23*FLEN/8
TEST_STORE_F(x1,x17,14,x15,f15,0x1c,23*XLEN/8,c.fsw,0,x3,x2, 23*FLEN/8)

inst_24:
// rs2_val == -524289, imm_val == 4
// opcode:c.fsw; op1:x15; op2:f15; immval:0x4; align:0; flagreg:x3;
// valreg: x2; valoffset: 24*FLEN/8
TEST_STORE_F(x1,x17,46,x15,f15,0x4,24*XLEN/8,c.fsw,0,x3,x2, 24*FLEN/8)

inst_25:
// rs2_val == -1048577, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x4; align:0; flagreg:x3;
// valreg: x2; valoffset: 25*FLEN/8
TEST_STORE_F(x1,x17,148,x15,f15,0x4,25*XLEN/8,c.fsw,0,x3,x2, 25*FLEN/8)

inst_26:
// rs2_val == -2097153, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x40; align:0; flagreg:x3;
// valreg: x2; valoffset: 26*FLEN/8
TEST_STORE_F(x1,x17,130,x15,f15,0x40,26*XLEN/8,c.fsw,0,x3,x2, 26*FLEN/8)

inst_27:
// rs2_val == -4194305, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x2c; align:0; flagreg:x3;
// valreg: x2; valoffset: 27*FLEN/8
TEST_STORE_F(x1,x17,125,x15,f15,0x2c,27*XLEN/8,c.fsw,0,x3,x2, 27*FLEN/8)

inst_28:
// rs2_val == -8388609, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x1c; align:0; flagreg:x3;
// valreg: x2; valoffset: 28*FLEN/8
TEST_STORE_F(x1,x17,155,x15,f15,0x1c,28*XLEN/8,c.fsw,0,x3,x2, 28*FLEN/8)

inst_29:
// rs2_val == -16777217, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x30; align:0; flagreg:x3;
// valreg: x2; valoffset: 29*FLEN/8
TEST_STORE_F(x1,x17,155,x15,f15,0x30,29*XLEN/8,c.fsw,0,x3,x2, 29*FLEN/8)

inst_30:
// rs2_val == -33554433, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x24; align:0; flagreg:x3;
// valreg: x2; valoffset: 30*FLEN/8
TEST_STORE_F(x1,x17,45,x15,f15,0x24,30*XLEN/8,c.fsw,0,x3,x2, 30*FLEN/8)

inst_31:
// rs2_val == -67108865, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x74; align:0; flagreg:x3;
// valreg: x2; valoffset: 31*FLEN/8
TEST_STORE_F(x1,x17,115,x15,f15,0x74,31*XLEN/8,c.fsw,0,x3,x2, 31*FLEN/8)

inst_32:
// rs2_val == -134217729, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x4; align:0; flagreg:x3;
// valreg: x2; valoffset: 32*FLEN/8
TEST_STORE_F(x1,x17,77,x15,f15,0x4,32*XLEN/8,c.fsw,0,x3,x2, 32*FLEN/8)

inst_33:
// rs2_val == -268435457, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x14; align:0; flagreg:x3;
// valreg: x2; valoffset: 33*FLEN/8
TEST_STORE_F(x1,x17,115,x15,f15,0x14,33*XLEN/8,c.fsw,0,x3,x2, 33*FLEN/8)

inst_34:
// rs2_val == -536870913, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x74; align:0; flagreg:x3;
// valreg: x2; valoffset: 34*FLEN/8
TEST_STORE_F(x1,x17,21,x15,f15,0x74,34*XLEN/8,c.fsw,0,x3,x2, 34*FLEN/8)

inst_35:
// rs2_val == -1073741825, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x5c; align:0; flagreg:x3;
// valreg: x2; valoffset: 35*FLEN/8
TEST_STORE_F(x1,x17,116,x15,f15,0x5c,35*XLEN/8,c.fsw,0,x3,x2, 35*FLEN/8)

inst_36:
// imm_val == 120, rs2_val == 65536
// opcode:c.fsw; op1:x15; op2:f15; immval:0x78; align:0; flagreg:x3;
// valreg: x2; valoffset: 36*FLEN/8
TEST_STORE_F(x1,x17,149,x15,f15,0x78,36*XLEN/8,c.fsw,0,x3,x2, 36*FLEN/8)

inst_37:
// imm_val == 60, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x3c; align:0; flagreg:x3;
// valreg: x2; valoffset: 37*FLEN/8
TEST_STORE_F(x1,x17,17,x15,f15,0x3c,37*XLEN/8,c.fsw,0,x3,x2, 37*FLEN/8)

inst_38:
// rs2_val == 1, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x40; align:0; flagreg:x3;
// valreg: x2; valoffset: 38*FLEN/8
TEST_STORE_F(x1,x17,25,x15,f15,0x40,38*XLEN/8,c.fsw,0,x3,x2, 38*FLEN/8)

inst_39:
// rs2_val == 4194304, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x44; align:0; flagreg:x3;
// valreg: x2; valoffset: 39*FLEN/8
TEST_STORE_F(x1,x17,86,x15,f15,0x44,39*XLEN/8,c.fsw,0,x3,x2, 39*FLEN/8)

inst_40:
// rs2_val == 8388608, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x0; align:0; flagreg:x3;
// valreg: x2; valoffset: 40*FLEN/8
TEST_STORE_F(x1,x17,125,x15,f15,0x0,40*XLEN/8,c.fsw,0,x3,x2, 40*FLEN/8)

inst_41:
// rs2_val == 16777216, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x74; align:0; flagreg:x3;
// valreg: x2; valoffset: 41*FLEN/8
TEST_STORE_F(x1,x17,69,x15,f15,0x74,41*XLEN/8,c.fsw,0,x3,x2, 41*FLEN/8)

inst_42:
// rs2_val == 67108864, imm_val == 8
// opcode:c.fsw; op1:x15; op2:f15; immval:0x8; align:0; flagreg:x3;
// valreg: x2; valoffset: 42*FLEN/8
TEST_STORE_F(x1,x17,74,x15,f15,0x8,42*XLEN/8,c.fsw,0,x3,x2, 42*FLEN/8)

inst_43:
// rs2_val == 134217728, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x4; align:0; flagreg:x3;
// valreg: x2; valoffset: 43*FLEN/8
TEST_STORE_F(x1,x17,46,x15,f15,0x4,43*XLEN/8,c.fsw,0,x3,x2, 43*FLEN/8)

inst_44:
// rs2_val == 268435456, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x28; align:0; flagreg:x3;
// valreg: x2; valoffset: 44*FLEN/8
TEST_STORE_F(x1,x17,116,x15,f15,0x28,44*XLEN/8,c.fsw,0,x3,x2, 44*FLEN/8)

inst_45:
// rs2_val == 536870912, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x0; align:0; flagreg:x3;
// valreg: x2; valoffset: 45*FLEN/8
TEST_STORE_F(x1,x17,149,x15,f15,0x0,45*XLEN/8,c.fsw,0,x3,x2, 45*FLEN/8)

inst_46:
// rs2_val == 1073741824, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x3c; align:0; flagreg:x3;
// valreg: x2; valoffset: 46*FLEN/8
TEST_STORE_F(x1,x17,124,x15,f15,0x3c,46*XLEN/8,c.fsw,0,x3,x2, 46*FLEN/8)

inst_47:
// rs2_val == 1431655765, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x14; align:0; flagreg:x3;
// valreg: x2; valoffset: 47*FLEN/8
TEST_STORE_F(x1,x17,69,x15,f15,0x14,47*XLEN/8,c.fsw,0,x3,x2, 47*FLEN/8)

inst_48:
// rs2_val == -1431655766, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x48; align:0; flagreg:x3;
// valreg: x2; valoffset: 48*FLEN/8
TEST_STORE_F(x1,x17,19,x15,f15,0x48,48*XLEN/8,c.fsw,0,x3,x2, 48*FLEN/8)

inst_49:
// imm_val == 84, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x54; align:0; flagreg:x3;
// valreg: x2; valoffset: 49*FLEN/8
TEST_STORE_F(x1,x17,30,x15,f15,0x54,49*XLEN/8,c.fsw,0,x3,x2, 49*FLEN/8)

inst_50:
// rs2_val == 0, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x1c; align:0; flagreg:x3;
// valreg: x2; valoffset: 50*FLEN/8
TEST_STORE_F(x1,x17,64,x15,f15,0x1c,50*XLEN/8,c.fsw,0,x3,x2, 50*FLEN/8)

inst_51:
// rs2_val == 2, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x2c; align:0; flagreg:x3;
// valreg: x2; valoffset: 51*FLEN/8
TEST_STORE_F(x1,x17,4,x15,f15,0x2c,51*XLEN/8,c.fsw,0,x3,x2, 51*FLEN/8)

inst_52:
// rs2_val == 4, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x8; align:0; flagreg:x3;
// valreg: x2; valoffset: 52*FLEN/8
TEST_STORE_F(x1,x17,12,x15,f15,0x8,52*XLEN/8,c.fsw,0,x3,x2, 52*FLEN/8)

inst_53:
// rs2_val == 8, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x14; align:0; flagreg:x3;
// valreg: x2; valoffset: 53*FLEN/8
TEST_STORE_F(x1,x17,9,x15,f15,0x14,53*XLEN/8,c.fsw,0,x3,x2, 53*FLEN/8)

inst_54:
// rs2_val == 32, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0xc; align:0; flagreg:x3;
// valreg: x2; valoffset: 54*FLEN/8
TEST_STORE_F(x1,x17,121,x15,f15,0xc,54*XLEN/8,c.fsw,0,x3,x2, 54*FLEN/8)

inst_55:
// rs2_val == 64, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x7c; align:0; flagreg:x3;
// valreg: x2; valoffset: 55*FLEN/8
TEST_STORE_F(x1,x17,106,x15,f15,0x7c,55*XLEN/8,c.fsw,0,x3,x2, 55*FLEN/8)

inst_56:
// rs2_val == 128, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x14; align:0; flagreg:x3;
// valreg: x2; valoffset: 56*FLEN/8
TEST_STORE_F(x1,x17,136,x15,f15,0x14,56*XLEN/8,c.fsw,0,x3,x2, 56*FLEN/8)

inst_57:
// rs2_val == 256, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x24; align:0; flagreg:x3;
// valreg: x2; valoffset: 57*FLEN/8
TEST_STORE_F(x1,x17,30,x15,f15,0x24,57*XLEN/8,c.fsw,0,x3,x2, 57*FLEN/8)

inst_58:
// rs2_val == 512, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x28; align:0; flagreg:x3;
// valreg: x2; valoffset: 58*FLEN/8
TEST_STORE_F(x1,x17,57,x15,f15,0x28,58*XLEN/8,c.fsw,0,x3,x2, 58*FLEN/8)

inst_59:
// rs2_val == 1024, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x10; align:0; flagreg:x3;
// valreg: x2; valoffset: 59*FLEN/8
TEST_STORE_F(x1,x17,2,x15,f15,0x10,59*XLEN/8,c.fsw,0,x3,x2, 59*FLEN/8)

inst_60:
// rs2_val == 2048, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x24; align:0; flagreg:x3;
// valreg: x2; valoffset: 60*FLEN/8
TEST_STORE_F(x1,x17,43,x15,f15,0x24,60*XLEN/8,c.fsw,0,x3,x2, 60*FLEN/8)

inst_61:
// rs2_val == 4096, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x10; align:0; flagreg:x3;
// valreg: x2; valoffset: 61*FLEN/8
TEST_STORE_F(x1,x17,37,x15,f15,0x10,61*XLEN/8,c.fsw,0,x3,x2, 61*FLEN/8)

inst_62:
// rs2_val == 8192, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x18; align:0; flagreg:x3;
// valreg: x2; valoffset: 62*FLEN/8
TEST_STORE_F(x1,x17,35,x15,f15,0x18,62*XLEN/8,c.fsw,0,x3,x2, 62*FLEN/8)

inst_63:
// rs2_val == 16384, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x38; align:0; flagreg:x3;
// valreg: x2; valoffset: 63*FLEN/8
TEST_STORE_F(x1,x17,32,x15,f15,0x38,63*XLEN/8,c.fsw,0,x3,x2, 63*FLEN/8)

inst_64:
// rs2_val == 32768, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x38; align:0; flagreg:x3;
// valreg: x2; valoffset: 64*FLEN/8
TEST_STORE_F(x1,x17,131,x15,f15,0x38,64*XLEN/8,c.fsw,0,x3,x2, 64*FLEN/8)

inst_65:
// rs2_val == 131072, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x28; align:0; flagreg:x3;
// valreg: x2; valoffset: 65*FLEN/8
TEST_STORE_F(x1,x17,120,x15,f15,0x28,65*XLEN/8,c.fsw,0,x3,x2, 65*FLEN/8)

inst_66:
// rs2_val == 262144, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x4; align:0; flagreg:x3;
// valreg: x2; valoffset: 66*FLEN/8
TEST_STORE_F(x1,x17,81,x15,f15,0x4,66*XLEN/8,c.fsw,0,x3,x2, 66*FLEN/8)

inst_67:
// rs2_val == 524288, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x54; align:0; flagreg:x3;
// valreg: x2; valoffset: 67*FLEN/8
TEST_STORE_F(x1,x17,0,x15,f15,0x54,67*XLEN/8,c.fsw,0,x3,x2, 67*FLEN/8)

inst_68:
// rs2_val == 1048576, 
// opcode:c.fsw; op1:x15; op2:f15; immval:0x48; align:0; flagreg:x3;
// valreg: x2; valoffset: 68*FLEN/8
TEST_STORE_F(x1,x17,153,x15,f15,0x48,68*XLEN/8,c.fsw,0,x3,x2, 68*FLEN/8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-2,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097152,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(33554432,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-2147483648,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2147483647,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-3,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-5,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-9,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-17,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-33,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-65,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-129,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-257,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-513,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-1025,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-2049,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-4097,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-8193,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-16385,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-32769,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-65537,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-131073,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-262145,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-524289,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-1048577,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-2097153,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-4194305,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-8388609,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-16777217,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-33554433,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-67108865,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-134217729,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-268435457,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-536870913,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-1073741825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65536,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-4194305,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777216,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108864,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435456,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(536870912,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1073741824,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1431655765,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(-1431655766,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(64,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(128,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(256,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(512,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1024,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2048,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4096,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8192,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16384,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32768,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131072,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262144,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524288,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048576,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 69*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
