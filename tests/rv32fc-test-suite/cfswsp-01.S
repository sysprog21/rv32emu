
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Fri Jan  5 19:15:51 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/fourcolor/Documents/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/fourcolor/Documents/riscv-ctg/sample_cgfs/rv32fc_1.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.fswsp instruction of the RISC-V RV32FC extension for the cfswsp covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFC")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*F.*C.*);def TEST_CASE_1=True;",cfswsp)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x2,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2==f2,imm_val == 0, rs2_val == 1024
// opcode:c.fswsp; op1:x2; op2:f2; op2val:0x400; immval:0x0; align:0; flagreg:x3;
// valreg: x2; valoffset: 0*FLEN/8
TEST_STORE_F(x1,x9,46,x2,f2,0x0,0*XLEN/8,c.fswsp,0,x3,x2, 0*FLEN/8)

inst_1:
// rs2==f25,imm_val == 0 and fcsr == 0, rs2_val == -513
// opcode:c.fswsp; op1:x2; op2:f25; op2val:-0x201; immval:0x0; align:0; flagreg:x3;
// valreg: x2; valoffset: 1*FLEN/8
TEST_STORE_F(x1,x9,0,x2,f25,0x0,1*XLEN/8,c.fswsp,0,x3,x2, 1*FLEN/8)

inst_2:
// rs2==f10,imm_val > 0, imm_val == 4, rs2_val == 2
// opcode:c.fswsp; op1:x2; op2:f10; op2val:0x2; immval:0x4; align:0; flagreg:x3;
// valreg: x2; valoffset: 2*FLEN/8
TEST_STORE_F(x1,x9,43,x2,f10,0x4,2*XLEN/8,c.fswsp,0,x3,x2, 2*FLEN/8)

inst_3:
// rs2==f4,imm_val > 0  and fcsr == 0, rs2_val == -129, imm_val == 244
// opcode:c.fswsp; op1:x2; op2:f4; op2val:-0x81; immval:0xf4; align:0; flagreg:x3;
// valreg: x2; valoffset: 3*FLEN/8
TEST_STORE_F(x1,x9,0,x2,f4,0xf4,3*XLEN/8,c.fswsp,0,x3,x2, 3*FLEN/8)

inst_4:
// rs2==f20,rs2_val == -2, 
// opcode:c.fswsp; op1:x2; op2:f20; op2val:-0x2; immval:0xfc; align:0; flagreg:x3;
// valreg: x2; valoffset: 4*FLEN/8
TEST_STORE_F(x1,x9,148,x2,f20,0xfc,4*XLEN/8,c.fswsp,0,x3,x2, 4*FLEN/8)

inst_5:
// rs2==f19,rs2_val == -3, 
// opcode:c.fswsp; op1:x2; op2:f19; op2val:-0x3; immval:0xfc; align:0; flagreg:x3;
// valreg: x2; valoffset: 5*FLEN/8
TEST_STORE_F(x1,x9,85,x2,f19,0xfc,5*XLEN/8,c.fswsp,0,x3,x2, 5*FLEN/8)

inst_6:
// rs2==f21,rs2_val == -5, 
// opcode:c.fswsp; op1:x2; op2:f21; op2val:-0x5; immval:0x0; align:0; flagreg:x3;
// valreg: x2; valoffset: 6*FLEN/8
TEST_STORE_F(x1,x9,37,x2,f21,0x0,6*XLEN/8,c.fswsp,0,x3,x2, 6*FLEN/8)

inst_7:
// rs2==f15,rs2_val == -9, 
// opcode:c.fswsp; op1:x2; op2:f15; op2val:-0x9; immval:0x28; align:0; flagreg:x3;
// valreg: x2; valoffset: 7*FLEN/8
TEST_STORE_F(x1,x9,57,x2,f15,0x28,7*XLEN/8,c.fswsp,0,x3,x2, 7*FLEN/8)

inst_8:
// rs2==f27,rs2_val == -17, 
// opcode:c.fswsp; op1:x2; op2:f27; op2val:-0x11; immval:0x44; align:0; flagreg:x3;
// valreg: x2; valoffset: 8*FLEN/8
TEST_STORE_F(x1,x9,114,x2,f27,0x44,8*XLEN/8,c.fswsp,0,x3,x2, 8*FLEN/8)

inst_9:
// rs2==f17,rs2_val == -33, imm_val == 188
// opcode:c.fswsp; op1:x2; op2:f17; op2val:-0x21; immval:0xbc; align:0; flagreg:x3;
// valreg: x2; valoffset: 9*FLEN/8
TEST_STORE_F(x1,x9,41,x2,f17,0xbc,9*XLEN/8,c.fswsp,0,x3,x2, 9*FLEN/8)

inst_10:
// rs2==f9,rs2_val == -65, 
// opcode:c.fswsp; op1:x2; op2:f9; op2val:-0x41; immval:0xbc; align:0; flagreg:x3;
// valreg: x2; valoffset: 10*FLEN/8
TEST_STORE_F(x1,x9,65,x2,f9,0xbc,10*XLEN/8,c.fswsp,0,x3,x2, 10*FLEN/8)

inst_11:
// rs2==f12,rs2_val == -257, 
// opcode:c.fswsp; op1:x2; op2:f12; op2val:-0x101; immval:0xc; align:0; flagreg:x3;
// valreg: x2; valoffset: 11*FLEN/8
TEST_STORE_F(x1,x9,12,x2,f12,0xc,11*XLEN/8,c.fswsp,0,x3,x2, 11*FLEN/8)

inst_12:
// rs2==f7,rs2_val == -1025, 
// opcode:c.fswsp; op1:x2; op2:f7; op2val:-0x401; immval:0x38; align:0; flagreg:x3;
// valreg: x2; valoffset: 12*FLEN/8
TEST_STORE_F(x1,x9,88,x2,f7,0x38,12*XLEN/8,c.fswsp,0,x3,x2, 12*FLEN/8)

inst_13:
// rs2==f23,rs2_val == -2049, 
// opcode:c.fswsp; op1:x2; op2:f23; op2val:-0x801; immval:0xbc; align:0; flagreg:x3;
// valreg: x2; valoffset: 13*FLEN/8
TEST_STORE_F(x1,x9,135,x2,f23,0xbc,13*XLEN/8,c.fswsp,0,x3,x2, 13*FLEN/8)

inst_14:
// rs2==f14,rs2_val == -4097, 
// opcode:c.fswsp; op1:x2; op2:f14; op2val:-0x1001; immval:0x44; align:0; flagreg:x3;
// valreg: x2; valoffset: 14*FLEN/8
TEST_STORE_F(x1,x9,94,x2,f14,0x44,14*XLEN/8,c.fswsp,0,x3,x2, 14*FLEN/8)

inst_15:
// rs2==f3,rs2_val == -8193, imm_val == 248
// opcode:c.fswsp; op1:x2; op2:f3; op2val:-0x2001; immval:0xf8; align:0; flagreg:x3;
// valreg: x2; valoffset: 15*FLEN/8
TEST_STORE_F(x1,x9,37,x2,f3,0xf8,15*XLEN/8,c.fswsp,0,x3,x2, 15*FLEN/8)

inst_16:
// rs2==f22,rs2_val == -16385, imm_val == 84
// opcode:c.fswsp; op1:x2; op2:f22; op2val:-0x4001; immval:0x54; align:0; flagreg:x3;
// valreg: x2; valoffset: 16*FLEN/8
TEST_STORE_F(x1,x9,36,x2,f22,0x54,16*XLEN/8,c.fswsp,0,x3,x2, 16*FLEN/8)

inst_17:
// rs2==f26,rs2_val == -32769, 
// opcode:c.fswsp; op1:x2; op2:f26; op2val:-0x8001; immval:0x2c; align:0; flagreg:x3;
// valreg: x2; valoffset: 17*FLEN/8
TEST_STORE_F(x1,x9,127,x2,f26,0x2c,17*XLEN/8,c.fswsp,0,x3,x2, 17*FLEN/8)

inst_18:
// rs2==f29,rs2_val == -65537, 
// opcode:c.fswsp; op1:x2; op2:f29; op2val:-0x10001; immval:0x28; align:0; flagreg:x3;
// valreg: x2; valoffset: 18*FLEN/8
TEST_STORE_F(x1,x9,123,x2,f29,0x28,18*XLEN/8,c.fswsp,0,x3,x2, 18*FLEN/8)

inst_19:
// rs2==f30,rs2_val == -131073, 
// opcode:c.fswsp; op1:x2; op2:f30; op2val:-0x20001; immval:0x0; align:0; flagreg:x3;
// valreg: x2; valoffset: 19*FLEN/8
TEST_STORE_F(x1,x9,18,x2,f30,0x0,19*XLEN/8,c.fswsp,0,x3,x2, 19*FLEN/8)

inst_20:
// rs2==f1,rs2_val == -262145, imm_val == 64
// opcode:c.fswsp; op1:x2; op2:f1; op2val:-0x40001; immval:0x40; align:0; flagreg:x3;
// valreg: x2; valoffset: 20*FLEN/8
TEST_STORE_F(x1,x9,113,x2,f1,0x40,20*XLEN/8,c.fswsp,0,x3,x2, 20*FLEN/8)

inst_21:
// rs2==f5,rs2_val == -524289, 
// opcode:c.fswsp; op1:x2; op2:f5; op2val:-0x80001; immval:0x54; align:0; flagreg:x3;
// valreg: x2; valoffset: 21*FLEN/8
TEST_STORE_F(x1,x9,144,x2,f5,0x54,21*XLEN/8,c.fswsp,0,x3,x2, 21*FLEN/8)

inst_22:
// rs2==f13,rs2_val == -1048577, 
// opcode:c.fswsp; op1:x2; op2:f13; op2val:-0x100001; immval:0x1c; align:0; flagreg:x3;
// valreg: x2; valoffset: 22*FLEN/8
TEST_STORE_F(x1,x9,131,x2,f13,0x1c,22*XLEN/8,c.fswsp,0,x3,x2, 22*FLEN/8)

inst_23:
// rs2==f0,rs2_val == -2097153, 
// opcode:c.fswsp; op1:x2; op2:f0; op2val:-0x200001; immval:0x14; align:0; flagreg:x3;
// valreg: x2; valoffset: 23*FLEN/8
TEST_STORE_F(x1,x9,9,x2,f0,0x14,23*XLEN/8,c.fswsp,0,x3,x2, 23*FLEN/8)

inst_24:
// rs2==f31,rs2_val == -4194305, imm_val == 236
// opcode:c.fswsp; op1:x2; op2:f31; op2val:-0x400001; immval:0xec; align:0; flagreg:x3;
// valreg: x2; valoffset: 24*FLEN/8
TEST_STORE_F(x1,x9,25,x2,f31,0xec,24*XLEN/8,c.fswsp,0,x3,x2, 24*FLEN/8)

inst_25:
// rs2==f16,rs2_val == -8388609, imm_val == 32
// opcode:c.fswsp; op1:x2; op2:f16; op2val:-0x800001; immval:0x20; align:0; flagreg:x3;
// valreg: x2; valoffset: 25*FLEN/8
TEST_STORE_F(x1,x9,107,x2,f16,0x20,25*XLEN/8,c.fswsp,0,x3,x2, 25*FLEN/8)

inst_26:
// rs2==f8,rs2_val == -16777217, 
// opcode:c.fswsp; op1:x2; op2:f8; op2val:-0x1000001; immval:0x20; align:0; flagreg:x3;
// valreg: x2; valoffset: 26*FLEN/8
TEST_STORE_F(x1,x9,35,x2,f8,0x20,26*XLEN/8,c.fswsp,0,x3,x2, 26*FLEN/8)

inst_27:
// rs2==f6,rs2_val == -33554433, imm_val == 220
// opcode:c.fswsp; op1:x2; op2:f6; op2val:-0x2000001; immval:0xdc; align:0; flagreg:x3;
// valreg: x2; valoffset: 27*FLEN/8
TEST_STORE_F(x1,x9,90,x2,f6,0xdc,27*XLEN/8,c.fswsp,0,x3,x2, 27*FLEN/8)

inst_28:
// rs2==f28,rs2_val == -67108865, 
// opcode:c.fswsp; op1:x2; op2:f28; op2val:-0x4000001; immval:0x48; align:0; flagreg:x3;
// valreg: x2; valoffset: 28*FLEN/8
TEST_STORE_F(x1,x9,36,x2,f28,0x48,28*XLEN/8,c.fswsp,0,x3,x2, 28*FLEN/8)

inst_29:
// rs2==f11,rs2_val == -134217729, imm_val == 168
// opcode:c.fswsp; op1:x2; op2:f11; op2val:-0x8000001; immval:0xa8; align:0; flagreg:x3;
// valreg: x2; valoffset: 29*FLEN/8
TEST_STORE_F(x1,x9,108,x2,f11,0xa8,29*XLEN/8,c.fswsp,0,x3,x2, 29*FLEN/8)

inst_30:
// rs2==f18,rs2_val == -268435457, 
// opcode:c.fswsp; op1:x2; op2:f18; op2val:-0x10000001; immval:0xc; align:0; flagreg:x3;
// valreg: x2; valoffset: 30*FLEN/8
TEST_STORE_F(x1,x9,81,x2,f18,0xc,30*XLEN/8,c.fswsp,0,x3,x2, 30*FLEN/8)

inst_31:
// rs2==f24,rs2_val == -536870913, 
// opcode:c.fswsp; op1:x2; op2:f24; op2val:-0x20000001; immval:0x28; align:0; flagreg:x3;
// valreg: x2; valoffset: 31*FLEN/8
TEST_STORE_F(x1,x9,92,x2,f24,0x28,31*XLEN/8,c.fswsp,0,x3,x2, 31*FLEN/8)

inst_32:
// rs2_val == -1073741825, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:-0x40000001; immval:0xfc; align:0; flagreg:x3;
// valreg: x2; valoffset: 32*FLEN/8
TEST_STORE_F(x1,x9,3,x2,f31,0xfc,32*XLEN/8,c.fswsp,0,x3,x2, 32*FLEN/8)

inst_33:
// rs2_val == 2147483647, imm_val == 16, rs2_val == (2**(xlen-1)-1)
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x7fffffff; immval:0x10; align:0; flagreg:x3;
// valreg: x2; valoffset: 33*FLEN/8
TEST_STORE_F(x1,x9,37,x2,f31,0x10,33*XLEN/8,c.fswsp,0,x3,x2, 33*FLEN/8)

inst_34:
// imm_val == 124, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:-0x4; immval:0x7c; align:0; flagreg:x3;
// valreg: x2; valoffset: 34*FLEN/8
TEST_STORE_F(x1,x9,108,x2,f31,0x7c,34*XLEN/8,c.fswsp,0,x3,x2, 34*FLEN/8)

inst_35:
// rs2_val == 1, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x1; immval:0x20; align:0; flagreg:x3;
// valreg: x2; valoffset: 35*FLEN/8
TEST_STORE_F(x1,x9,53,x2,f31,0x20,35*XLEN/8,c.fswsp,0,x3,x2, 35*FLEN/8)

inst_36:
// rs2_val == 4, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x4; immval:0xbc; align:0; flagreg:x3;
// valreg: x2; valoffset: 36*FLEN/8
TEST_STORE_F(x1,x9,60,x2,f31,0xbc,36*XLEN/8,c.fswsp,0,x3,x2, 36*FLEN/8)

inst_37:
// rs2_val == 8, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x8; immval:0x30; align:0; flagreg:x3;
// valreg: x2; valoffset: 37*FLEN/8
TEST_STORE_F(x1,x9,44,x2,f31,0x30,37*XLEN/8,c.fswsp,0,x3,x2, 37*FLEN/8)

inst_38:
// rs2_val == 16, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x10; immval:0x40; align:0; flagreg:x3;
// valreg: x2; valoffset: 38*FLEN/8
TEST_STORE_F(x1,x9,96,x2,f31,0x40,38*XLEN/8,c.fswsp,0,x3,x2, 38*FLEN/8)

inst_39:
// rs2_val == 32, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x20; immval:0xf4; align:0; flagreg:x3;
// valreg: x2; valoffset: 39*FLEN/8
TEST_STORE_F(x1,x9,55,x2,f31,0xf4,39*XLEN/8,c.fswsp,0,x3,x2, 39*FLEN/8)

inst_40:
// rs2_val == 4194304, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x400000; immval:0x34; align:0; flagreg:x3;
// valreg: x2; valoffset: 40*FLEN/8
TEST_STORE_F(x1,x9,54,x2,f31,0x34,40*XLEN/8,c.fswsp,0,x3,x2, 40*FLEN/8)

inst_41:
// rs2_val == 8388608, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x800000; immval:0x4c; align:0; flagreg:x3;
// valreg: x2; valoffset: 41*FLEN/8
TEST_STORE_F(x1,x9,99,x2,f31,0x4c,41*XLEN/8,c.fswsp,0,x3,x2, 41*FLEN/8)

inst_42:
// rs2_val == 16777216, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x1000000; immval:0x0; align:0; flagreg:x3;
// valreg: x2; valoffset: 42*FLEN/8
TEST_STORE_F(x1,x9,44,x2,f31,0x0,42*XLEN/8,c.fswsp,0,x3,x2, 42*FLEN/8)

inst_43:
// rs2_val == 33554432, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x2000000; immval:0x20; align:0; flagreg:x3;
// valreg: x2; valoffset: 43*FLEN/8
TEST_STORE_F(x1,x9,155,x2,f31,0x20,43*XLEN/8,c.fswsp,0,x3,x2, 43*FLEN/8)

inst_44:
// rs2_val == 67108864, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x4000000; immval:0x3c; align:0; flagreg:x3;
// valreg: x2; valoffset: 44*FLEN/8
TEST_STORE_F(x1,x9,78,x2,f31,0x3c,44*XLEN/8,c.fswsp,0,x3,x2, 44*FLEN/8)

inst_45:
// rs2_val == 134217728, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x8000000; immval:0x38; align:0; flagreg:x3;
// valreg: x2; valoffset: 45*FLEN/8
TEST_STORE_F(x1,x9,76,x2,f31,0x38,45*XLEN/8,c.fswsp,0,x3,x2, 45*FLEN/8)

inst_46:
// rs2_val == 268435456, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x10000000; immval:0xec; align:0; flagreg:x3;
// valreg: x2; valoffset: 46*FLEN/8
TEST_STORE_F(x1,x9,30,x2,f31,0xec,46*XLEN/8,c.fswsp,0,x3,x2, 46*FLEN/8)

inst_47:
// rs2_val == 536870912, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x20000000; immval:0x3c; align:0; flagreg:x3;
// valreg: x2; valoffset: 47*FLEN/8
TEST_STORE_F(x1,x9,102,x2,f31,0x3c,47*XLEN/8,c.fswsp,0,x3,x2, 47*FLEN/8)

inst_48:
// rs2_val == 1073741824, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x40000000; immval:0x48; align:0; flagreg:x3;
// valreg: x2; valoffset: 48*FLEN/8
TEST_STORE_F(x1,x9,21,x2,f31,0x48,48*XLEN/8,c.fswsp,0,x3,x2, 48*FLEN/8)

inst_49:
// rs2_val == -2147483648, rs2_val == (-2**(xlen-1))
// opcode:c.fswsp; op1:x2; op2:f31; op2val:-0x80000000; immval:0x20; align:0; flagreg:x3;
// valreg: x2; valoffset: 49*FLEN/8
TEST_STORE_F(x1,x9,154,x2,f31,0x20,49*XLEN/8,c.fswsp,0,x3,x2, 49*FLEN/8)

inst_50:
// imm_val == 8, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:-0x6; immval:0x8; align:0; flagreg:x3;
// valreg: x2; valoffset: 50*FLEN/8
TEST_STORE_F(x1,x9,43,x2,f31,0x8,50*XLEN/8,c.fswsp,0,x3,x2, 50*FLEN/8)

inst_51:
// imm_val == 128, rs2_val == 64
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x40; immval:0x80; align:0; flagreg:x3;
// valreg: x2; valoffset: 51*FLEN/8
TEST_STORE_F(x1,x9,112,x2,f31,0x80,51*XLEN/8,c.fswsp,0,x3,x2, 51*FLEN/8)

inst_52:
// rs2_val == 1431655765, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x55555555; immval:0xf4; align:0; flagreg:x3;
// valreg: x2; valoffset: 52*FLEN/8
TEST_STORE_F(x1,x9,151,x2,f31,0xf4,52*XLEN/8,c.fswsp,0,x3,x2, 52*FLEN/8)

inst_53:
// rs2_val == -1431655766, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:-0x55555556; immval:0x40; align:0; flagreg:x3;
// valreg: x2; valoffset: 53*FLEN/8
TEST_STORE_F(x1,x9,70,x2,f31,0x40,53*XLEN/8,c.fswsp,0,x3,x2, 53*FLEN/8)

inst_54:
// rs2_val == 65536, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x10000; immval:0x44; align:0; flagreg:x3;
// valreg: x2; valoffset: 54*FLEN/8
TEST_STORE_F(x1,x9,7,x2,f31,0x44,54*XLEN/8,c.fswsp,0,x3,x2, 54*FLEN/8)

inst_55:
// rs2_val == 128, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x80; immval:0x40; align:0; flagreg:x3;
// valreg: x2; valoffset: 55*FLEN/8
TEST_STORE_F(x1,x9,125,x2,f31,0x40,55*XLEN/8,c.fswsp,0,x3,x2, 55*FLEN/8)

inst_56:
// rs2_val == 256, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x100; immval:0x44; align:0; flagreg:x3;
// valreg: x2; valoffset: 56*FLEN/8
TEST_STORE_F(x1,x9,44,x2,f31,0x44,56*XLEN/8,c.fswsp,0,x3,x2, 56*FLEN/8)

inst_57:
// rs2_val == 512, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x200; immval:0x3c; align:0; flagreg:x3;
// valreg: x2; valoffset: 57*FLEN/8
TEST_STORE_F(x1,x9,60,x2,f31,0x3c,57*XLEN/8,c.fswsp,0,x3,x2, 57*FLEN/8)

inst_58:
// rs2_val == 2048, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x800; immval:0x28; align:0; flagreg:x3;
// valreg: x2; valoffset: 58*FLEN/8
TEST_STORE_F(x1,x9,40,x2,f31,0x28,58*XLEN/8,c.fswsp,0,x3,x2, 58*FLEN/8)

inst_59:
// rs2_val == 8192, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x2000; immval:0x24; align:0; flagreg:x3;
// valreg: x2; valoffset: 59*FLEN/8
TEST_STORE_F(x1,x9,113,x2,f31,0x24,59*XLEN/8,c.fswsp,0,x3,x2, 59*FLEN/8)

inst_60:
// rs2_val == 0, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x0; immval:0xc; align:0; flagreg:x3;
// valreg: x2; valoffset: 60*FLEN/8
TEST_STORE_F(x1,x9,25,x2,f31,0xc,60*XLEN/8,c.fswsp,0,x3,x2, 60*FLEN/8)

inst_61:
// rs2_val == 4096, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x1000; immval:0xec; align:0; flagreg:x3;
// valreg: x2; valoffset: 61*FLEN/8
TEST_STORE_F(x1,x9,141,x2,f31,0xec,61*XLEN/8,c.fswsp,0,x3,x2, 61*FLEN/8)

inst_62:
// rs2_val == 16384, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x4000; immval:0x14; align:0; flagreg:x3;
// valreg: x2; valoffset: 62*FLEN/8
TEST_STORE_F(x1,x9,82,x2,f31,0x14,62*XLEN/8,c.fswsp,0,x3,x2, 62*FLEN/8)

inst_63:
// rs2_val == 32768, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x8000; immval:0x4; align:0; flagreg:x3;
// valreg: x2; valoffset: 63*FLEN/8
TEST_STORE_F(x1,x9,29,x2,f31,0x4,63*XLEN/8,c.fswsp,0,x3,x2, 63*FLEN/8)

inst_64:
// rs2_val == 131072, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x20000; immval:0xbc; align:0; flagreg:x3;
// valreg: x2; valoffset: 64*FLEN/8
TEST_STORE_F(x1,x9,100,x2,f31,0xbc,64*XLEN/8,c.fswsp,0,x3,x2, 64*FLEN/8)

inst_65:
// rs2_val == 262144, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x40000; immval:0x30; align:0; flagreg:x3;
// valreg: x2; valoffset: 65*FLEN/8
TEST_STORE_F(x1,x9,1,x2,f31,0x30,65*XLEN/8,c.fswsp,0,x3,x2, 65*FLEN/8)

inst_66:
// rs2_val == 524288, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x80000; immval:0x3c; align:0; flagreg:x3;
// valreg: x2; valoffset: 66*FLEN/8
TEST_STORE_F(x1,x9,3,x2,f31,0x3c,66*XLEN/8,c.fswsp,0,x3,x2, 66*FLEN/8)

inst_67:
// rs2_val == 1048576, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x100000; immval:0x8; align:0; flagreg:x3;
// valreg: x2; valoffset: 67*FLEN/8
TEST_STORE_F(x1,x9,14,x2,f31,0x8,67*XLEN/8,c.fswsp,0,x3,x2, 67*FLEN/8)

inst_68:
// rs2_val == 2097152, 
// opcode:c.fswsp; op1:x2; op2:f31; op2val:0x200000; immval:0x10; align:0; flagreg:x3;
// valreg: x2; valoffset: 68*FLEN/8
TEST_STORE_F(x1,x9,69,x2,f31,0x10,68*XLEN/8,c.fswsp,0,x3,x2, 68*FLEN/8)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 69*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
